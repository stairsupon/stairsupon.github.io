{"meta":{"title":"Stairs_upon_temple","subtitle":"","description":"","author":"Stairs_upon_temple","url":"http://stairsupon.github.io","root":"/"},"pages":[{"title":"","date":"2025-01-21T01:36:46.026Z","updated":"2025-01-21T01:36:46.026Z","comments":true,"path":"404/index.html","permalink":"http://stairsupon.github.io/404/index.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"我的朋友们","date":"2025-01-21T01:35:54.497Z","updated":"2025-01-21T01:35:54.497Z","comments":true,"path":"friends/index.html","permalink":"http://stairsupon.github.io/friends/index.html","excerpt":"这里写友链上方的内容。","text":"这里写友链上方的内容。 这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。"},{"title":"所有标签","date":"2025-01-21T01:35:21.232Z","updated":"2025-01-21T01:35:21.232Z","comments":true,"path":"tags/index.html","permalink":"http://stairsupon.github.io/tags/index.html","excerpt":"","text":""},{"title":"所有分类","date":"2025-01-21T01:35:33.657Z","updated":"2025-01-21T01:35:33.657Z","comments":true,"path":"categories/index.html","permalink":"http://stairsupon.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2025-01-21T07:11:37.485Z","updated":"2025-01-21T01:40:21.994Z","comments":true,"path":"about/index.html","permalink":"http://stairsupon.github.io/about/index.html","excerpt":"","text":"下面写关于自己的内容"}],"posts":[{"title":"NOIp 2024 游记 & 退役感言","slug":"wordstoOIerslater","date":"2024-12-14T06:38:00.000Z","updated":"2025-01-21T07:28:18.738Z","comments":true,"path":"2024/12/14/wordstoOIerslater/","permalink":"http://stairsupon.github.io/2024/12/14/wordstoOIerslater/","excerpt":"","text":"结束了，一切都结束了。 先浅谈一下这次 NOIP 首先本来这次是抱着很大的希望的，毕竟准备了那么久，还是希望能够拿到比较高的奖项，然而结果却非常令人失望。 DAY 0 考前为了鼓舞士气，我特意做了个主题，现在看来却是讽刺至极。 因为考试当天是星期六，所以在此之前一天我们收拾收拾就回去了，刚好还能不占月假（因为学竞赛，这可能是我们第一次放月假），回到家后想起同学说的长 RP 的好方法 —— 把线段树的模板打一遍，不编译直接提交看能不能一遍过，当时我觉得线段树太简单，决定在此基础上加点难度，于是我直接打树剖模板题，结果当时我想着线段树空间开四倍，一不小心写成了右移四，导致 MLE , 然后改了之后就洗洗睡了，顺带上号把每日任务做了一些（还刷出一个高资）。 DAY 1 考试当天，七点钟已经到达考试地点也就是七中高新，在门口简单吃了一顿早饭，便开始用手机复习一些模板，顺带提交了早就写好的 P4994 终于结束的起点的代码，然后准备入场。 试机 他甚至还有试机时间，这应该是我第一次试机，利用这个时间，我打了一边超级快读和线段树，已备不时之需，此刻我的心里一直鼓励自己，加油。 考试 试题也是发的比较快，还没到点就发下来了，我以自己最快的速度打开试卷，开始读题，当时第一题刚读完，就已经有思路了，简单在草稿纸上推了一下，马上就开始写，也是用了不到 5 min 就写完了，测了一下样例，小样例随便过，而再测大样例的时候就没那么幸运了，结果大了很多，当时我以为是写挂了，于是调了半天（ about 1 hour ），也没调出来当时想着放一放去做下一题。 第二题看上去就很和善，看完之后想到要推式子，但对个人实力不太认可，于是决定骗分（赛后觉得糖丸了，当时还剩三个小时，绝对推得出来），骗分的过程也是相当愉快，很快就骗到 60 分了，大概花了半个小时。 此时，我还剩 2.5 hour 我能干的要么去看后面的题，要么把 T1 切了。一向不擅长选择的我选择了前者（事实证明，如果当时我两个都不选，而是把题全部再读一遍，可能会好很多）。回过头来调 T1 的过程相当痛苦，反复造样例反复算，就是 hack 不了。无奈之下看了一眼 T3 , 结果发现看不了一点，晃了一眼 T4 似乎有点树剖的想法，但想了一想（当时还剩 30 min），还是做 T1 收益最大，当时我已心灰意冷，不知所措，回想自己两年以来的 OI 生涯，感觉懊恼不已。在此刻我选择把题再读一遍，结果却是令人绝望的，我居然把 T1 题面读错了，没有看到相邻两个字，我感觉我已经处于崩溃的边缘，甚至当时不知怎么，我居然笑了出来（现在想起这是多么令人绝望的笑）。 在如此绝望的情形下，我想平时切黄体差不多 10 min ，这题估计也就是个黄题（赛后想了想，抛开证明难度差不多是黄题），然后在心中为自己加油打气，用了 10 min 想外加 10 min 重构（当时全程手都在抖，考完后键盘上全是汗），代码打完后测了一下，居然所有样例一遍过。 最后 5 min 检查了一下，感觉没问题，抱着 160 分的期望成绩，等待着我的 OI 生涯的最后时刻的到来。 而成绩出来之后，却是另一番苦涩，第一题最后用于计数的桶没有清零，导致挂了 70 分，第二题最暴力的点没有换行，导致一分没得，最后一共挂了 130 ，实得 30 分。这是如此的令人绝望。 考后 当天其实我并没有表现过的悲伤，下午还是和同机房的人出去掇了台球，就当是赛后的放松了，顺带还叫上了之前的故友 GGapa。 其实在此刻我已经做好抱零的准备了（虽然没有，但似乎更让我感到悲痛）。 感言 先说寄语 对于后来人，如果你是真心地热爱竞赛，那么不管你是从什么时候开始，希望你能坚持下去；如果你只是为了升学，倘如在你走不下去时，还是尽早放弃为妙。 对于不同时期开始的同学，我认为应该有不同的目标。 保送的名额一年就几十个，谁都不能说自己是稳的，如果你是高中或初三才开始认真学，认清自己，定好目标。也许省一已是最好的归宿。 再说建议 先认清楚你学竞赛的目标，要有长期的规划，什么时候学什么，什么时候练习，什么时候打比赛（强校同学可以无视，一般教练都帮你们规划好了）。 不要摸鱼，这个太重要了，尤其是在做题做到一半时，会打断自己的思路，长期这样还会养成糟糕的思维习惯，导致注意力难以集中，不但影响竞赛，还有文化课。 系统刷题，在学习新算法或练习期间，不要盲目刷题，如果一段时间你在搞数据结构，你就认真地搞，不要因为看到一道别的知识点的好题（或水题），就转移目标，如果真的想做，可以加到做题计划中去，等以后在补。 不要划水，如果一道题，当你选择了要做他时，就一定要把他做出来（只要是在自己能力范围内），这样的题对个人的实力提升是巨大的，因为长时间没有做出来代表了自己的思维盲区，将其消灭，方能取得进步。 赛后改错，这点有多重要我不必多说。如果是想到了正解，但没做出来，建议好好看看自己的代码，找出造成自己漏洞的原因；但如果连正解都没想到，建议好好整理一下思路和过程，最好写一篇题解（可以不发出来，只写给自己看）。不管一道题做没做出来，都建议整理一下结论的证明过程（尤其是贪心和构造这种题目）。 保持谦卑，不要觉得自己实力很强，山外有山，人外有人，每一次我见到新的高手都会刷新我的认知，做好自己，不要因为一次成绩就无法无天，对新的算法，新的 trick 保持一种渴望。 深度挖掘，这个可以说是这几点中最重要的，一个算法，学了之后不但要搞清楚原理，还有模板，扩展以及和其他算法的融合，不要想当然的认为自己会了，便开始学习新的内容。 不留余地，作为一个竞赛生，真的不一定能走出来，但在选择路时不要给自己留余地，不要为了升学才选择 OI，在学的过程中，要学就认真学，耽误 WHK 就耽误，如果连这点代价都承担不了，还有什么必要学 OI 呢？ 以上几点都是结合我的个人经历来的，也是导致我从一个万众瞩目的种子选手到一无是处的废物所没有遵循的，也许这里面有运气和个人的原因，但事实证明，在竞赛这方面，可以说选择大于努力。 最后说一下个人经历 本人于高二遗憾退役（2024.11.30）。 要说初次接触编程，还是在小学四升五的时候，当时我的父母想把我送进当地比较好的学校（下文称为 CW）, 但在面试考试的过程中因为不会表演才艺，遗憾落选。于是我的家长给我报了一个另一个学校（下文称为 SW）的夏令营（主要是搞 WHK 的），而那一周刚好有一节编程课，在此之前我就听说过编程是很高级的东西，上了那节课之后，便对 Python 产生了浓厚的兴趣。 后来一向理科比较好的我进入了当地另一所学校（下文称为 JX）的分校区，再此过程中我也在利用课余时间学习 Python, 在后来的一场由 CW 举办的比赛中（更竞赛题比起来，全是入机题）拿到了比较好的成绩，然后就被机构推荐去学习 C++。 自此，我苦涩如歌的 OI 生涯开始了。 小学第一次参考 CSP-J，不出意外初赛只拿了 30 分。因为当时那个机构的课程已经学完（其实就是把 C++ 的语法基础学完了），所以打算换一个机构。 后来我的家长选择了学而思网课的 C++ 课程，而事实证明这无疑是一个错误的选择。一周两个小时的听课时间，十分钟的刷题量，学了一年也没有什么起色。后来小升初，因为强制要求大摇号，导致不敢去摇知名的学校（虽然我的成绩是可以考上的），只能选择一个才开两年且承诺非常好的学校（下文称 DC），然而这才是最错误的选择。 在临近我初一 CSP-J 时，我的家长将我送到了当地的科普基地进行学习，","categories":[{"name":"闲话","slug":"闲话","permalink":"http://stairsupon.github.io/categories/%E9%97%B2%E8%AF%9D/"}],"tags":[{"name":"鲜花","slug":"鲜花","permalink":"http://stairsupon.github.io/tags/%E9%B2%9C%E8%8A%B1/"},{"name":"感言","slug":"感言","permalink":"http://stairsupon.github.io/tags/%E6%84%9F%E8%A8%80/"}]},{"title":"题解：P11243 繁花","slug":"flowers","date":"2024-11-05T11:44:00.000Z","updated":"2025-01-21T06:55:56.913Z","comments":true,"path":"2024/11/05/flowers/","permalink":"http://stairsupon.github.io/2024/11/05/flowers/","excerpt":"","text":"这是一篇图论做法题解 闲话：我看到基本上都是动态规划做法，但我考场上第一时间想到了图论，并且个人认为图论做法更好想到一些，故写此题解。 思路 首先，容易知道对于一个点的贡献，可以认为是一定比该点小的点的个数，而在这里很容易想到可以从该点连边到比该直接点小的点（即题目描述中直接用 或 连接的点），而题目描述中出现若干的点值可能相等，我们可以将这些点合并为一个点并统计相同的个数，然后整体来乘比该点小的点的个数，这样可以用 的复杂度过掉此题。 方便理解，这里给出样例中最后一个的图。 具体实现 先根据题中给的大小关系建图，从大的点向小的连边，相等则合并（我用的是并查集，其实也可以用缩点），然后统计子树大小总和，该点的贡献即为该点的数量乘上子树大小总和。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156/*g++ -o2 2.cpp -o c -std=c++14./c*/#include&lt;cstdio&gt;using namespace std;typedef long long ll;const int N=5e6+100;const int M=5e6+100;char *p1,*p2;char buf[100];#define nc() getchar()// #define nc() (p1==p2 &amp;&amp; (p2=(p1=buf)+fread(buf,1,100,stdin),p1==p2)?EOF:*p1++)inline void read(int &amp;x){ x=0; char ch=nc(); while(ch&lt;48 || ch&gt;57){ ch=nc(); } while(ch&gt;=48 &amp;&amp; ch&lt;=57){ x=(x&lt;&lt;3)+(x&lt;&lt;1)+ch-48; ch=nc(); } return ;}int tot;int head[N];struct edge{ int x; int y; int next;}e[M];int T;int n,m;int siz[N];int cnt[N];int son[N];int fa[N];int in[N];char s[N];int vis[N];ll ans;inline void init(){ tot=0; for(int i=1;i&lt;=n+10;i++){ siz[i]=0; cnt[i]=1; head[i]=-1; fa[i]=i; vis[i]=0; } return ;}inline void add(int x,int y){ e[tot].x=x; e[tot].y=y; e[tot].next=head[x]; head[x]=tot++; return ;}inline int find(int x){ while(fa[x]^x) x=fa[x]; return x;}inline void merge(int x,int y){ int a=find(x); int b=find(y); if(a!=b){ fa[b]=a; cnt[a]+=cnt[b]; cnt[b]=0; } return ;}void dfs(int x,int fa){ siz[x]=cnt[x]; for(int i=head[x];~i;i=e[i].next){ int y=e[i].y; if(y==fa)continue; if(!vis[y])dfs(y,x); siz[x]+=siz[y]; } if(!vis[x]){ ans+=ll(cnt[x]*(siz[x]-cnt[x])); vis[x]=1; } return ;}void debug_build(){ printf(\"\\n\"); printf(\"%d\\n\",tot); for(int i=0;i&lt;tot;i++){ int x=e[i].x; int y=e[i].y; // int w=e[i].w; printf(\"%d %d\\n\",x,y); } printf(\"\\n\"); return ;}int main(){ read(T); while(T--){ ans=0; read(n); init(); scanf(\"%s\",s); for(int i=1;i&lt;n;i++){ if(s[i-1]=='='){ merge(i,i+1); vis[i+1]=1; } } for(int i=1;i&lt;n;i++){ int x=find(i); int y=find(i+1); if(s[i-1]=='&lt;')add(y,x); else if(s[i-1]=='&gt;')add(x,y); } // debug_build(); for(int i=1;i&lt;=n;i++){ printf(\"%d %d \\n\",i,fa[i]); } for(int i=1;i&lt;=n;i++){ if(!vis[i])dfs(i,0); } printf(\"%lld\\n\",ans); } return 0;}/*113=&gt;&lt;&lt;=&lt;=&gt;=&gt;&lt;&gt;*/","categories":[{"name":"题解","slug":"题解","permalink":"http://stairsupon.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"题解","slug":"题解","permalink":"http://stairsupon.github.io/tags/%E9%A2%98%E8%A7%A3/"},{"name":"凸轮","slug":"凸轮","permalink":"http://stairsupon.github.io/tags/%E5%87%B8%E8%BD%AE/"}]}],"categories":[{"name":"闲话","slug":"闲话","permalink":"http://stairsupon.github.io/categories/%E9%97%B2%E8%AF%9D/"},{"name":"题解","slug":"题解","permalink":"http://stairsupon.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"鲜花","slug":"鲜花","permalink":"http://stairsupon.github.io/tags/%E9%B2%9C%E8%8A%B1/"},{"name":"感言","slug":"感言","permalink":"http://stairsupon.github.io/tags/%E6%84%9F%E8%A8%80/"},{"name":"题解","slug":"题解","permalink":"http://stairsupon.github.io/tags/%E9%A2%98%E8%A7%A3/"},{"name":"凸轮","slug":"凸轮","permalink":"http://stairsupon.github.io/tags/%E5%87%B8%E8%BD%AE/"}]}